name: 'Google Bloaty Action'
description: 'Build and run google/bloaty on a set of files'
author: Kendal Harland

inputs:
  bloaty-version:
    description: A Git ref specifying the version of bloaty to build.
    default: 'refs/heads/main'
    required: false

  bloaty-checkout-dir:
    description: Where to clone and build google/bloaty
    default: ${{ github.workspace }}/.google-bloaty
    required: false

  bloaty-args:
    description: The arguments to pass to bloaty. Input filenames must use absolute paths.
    default: ''
    required: true

  bloaty-input-files:
    description: A list of input filenames and glob patterns separated by newlines. You cannot set bloaty's -c flag when using this.
    default: ''
    required: false

  bloaty-output-file:
    description: A filename where bloaty output should be written.
    default: 'bloaty-output'
    required: true

  cache-bloaty:
    description: Cache the bloaty executable for faster builds.
    default: 'false'
    required: false

  cache-bloaty-key:
    description: The key to use when caching bloaty. Only used if 'cache-bloaty' is true. Defaults to bloaty-<bloaty-version>
    default: ''
    required: false

runs:
  using: composite
  steps:
    - name: Resolve bloaty cache key
      if: inputs.cache-bloaty == 'true'
      id: cache-key
      shell: pwsh
      run: |
        if ("${{ inputs.cache-bloaty-key }}") {
          "cache-key=${{ inputs.cache-bloaty-key }}" | Out-File $env:GITHUB_OUTPUT -Encoding utf8 -Append
        } else {
          "cache-key=bloaty-${{ inputs.bloaty-version }}" | Out-File $env:GITHUB_OUTPUT -Encoding utf8 -Append
        }

    - name: Restore bloaty cache
      if: inputs.cache-bloaty == 'true'
      id: cache
      uses: actions/cache/restore@v3
      with:
        key: ${{ steps.cache-key.outputs.cache-key }}
        path: .caches/bloaty

    - name: Generate bloaty options file
      shell: bash
      run: |
        BloatyOptionsFile="${{ github.workspace }}/.bloaty.textproto"
        mkdir -p $(dirname ${BloatyOptionsFile})
        touch $BloatyOptionsFile
        echo "BLOATY_OPTIONS_FILE=$BloatyOptionsFile" >> $GITHUB_ENV

      # Bash is used here because with globstar enabled we can easily handle recursive
      # glob patterns.
    - name: Generate bloaty options file contents
      if: inputs.bloaty-input-files != ''
      shell: bash
      run: |
          # Enables recursive glob patterns. Requires Bash v4+.
          shopt -s globstar

          # Parse input patterns, taking care to convert \ to / to avoid
          # incorrectly escaping filenames that come from windows.
          BloatyInputFiles=$(echo "${{ inputs.bloaty-input-files }}" | sed 's/\\/\//g')
          IFS=$'\n' read -d '%' -a Patterns <<<"${BloatyInputFiles}%"
          declare -p Patterns

          # Glob files and generate filenames in the options file, replacing backslashes
          # with forward slashes.
          for Pattern in ${Patterns[@]}; do
            # We don't use xargs here because it can't handle large inputs.
            for Filename in $(ls "${Pattern}"); do
              echo "filename: \"${Filename}\"" >> $BLOATY_OPTIONS_FILE
            done
          done

          echo "-- Contents of $BLOATY_OPTIONS_FILE"
          cat $BLOATY_OPTIONS_FILE

    - name: Checkout google/bloaty
      if: steps.cache.outputs.cache-hit != 'true'
      uses: actions/checkout@v4
      with:
        repository: google/bloaty
        ref: ${{ inputs.bloaty-version }}
        path: ${{ inputs.bloaty-checkout-dir }}
        show-progress: false

    - name: Setup Ninja
      if: steps.cache.outputs.cache-hit != 'true'
      uses: seanmiddleditch/gha-setup-ninja@v4

    # Below we use cl.exe for arm64 (MSVC) and the default compiler for x64 (Usually GNU 12.2.0 on windows-latest).
    # This is because:
    #  1. g++ doesn't work on our arm64 images which don't have a Windows SDK old enough to support the g++11 standard,
    #     which is required by google/bloaty's dependency on google/re2.
    #  2. clang-cl does not work with google/bloaty's pinned version of protocolfbuffers/protobuf because of
    #     https://github.com/protocolbuffers/protobuf/issues/6503. This issue was fixed in
    #     https://github.com/protocolbuffers/protobuf/pull/8139 but third_party/protobuf is pinned to a git
    #     commit from 2019 which still has the bug.

    - name: Configure bloaty (arm64)
      if: steps.cache.outputs.cache-hit != 'true' && runner.arch == 'ARM64'
      shell: pwsh
      run: |
        cmake -B ${{ inputs.bloaty-checkout-dir }}/.build `
          -S ${{ inputs.bloaty-checkout-dir }} `
          -G Ninja `
          -D CMAKE_CXX_COMPILER="cl" `
          -D CMAKE_C_COMPILER="cl"

    - name: Configure bloaty (x64)
      if: steps.cache.outputs.cache-hit != 'true' && runner.arch != 'ARM64'
      shell: pwsh
      run: |
        cmake -B ${{ inputs.bloaty-checkout-dir }}/.build `
          -S ${{ inputs.bloaty-checkout-dir }} `
          -G Ninja

    - name: Build bloaty
      if: steps.cache.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        cmake --build ${{ inputs.bloaty-checkout-dir }}/.build

        # Copy bloaty.exe to the same path used by the cache so we can add it to our PATH
        # in the next step, regardless of whether we hit the cache earlier.
        New-Item -Path .caches/bloaty -ItemType Directory -Force | Out-Null
        Copy-Item ${{ inputs.bloaty-checkout-dir }}/.build/bloaty.exe -Destination .caches/bloaty

    - name: Cache bloaty
      if: inputs.cache-bloaty == 'true' && steps.cache.outputs.cache-hit != 'true'
      uses: actions/cache/save@v3
      with:
        key: ${{ steps.cache-key.outputs.cache-key }}
        path: .caches/bloaty

    - name: Add bloaty to path
      shell: pwsh
      run: echo ".caches/bloaty" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Run bloaty
      shell: pwsh
      run: bloaty -c ${{ env.BLOATY_OPTIONS_FILE }} ${{ inputs.bloaty-args }} | Out-File ${{ inputs.bloaty-output-file }} -Encoding utf8
